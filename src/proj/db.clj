(ns proj.db
  (:gen-class))

(defn processHandle [choice productList customerList salesList]
  (when (= choice "1")
    (println "1. Display Customer Table")
    (def counter 1)
    (loop [x 3]
      (when (< x (count customerList))
        (def theName (get customerList (- x 2)))
        (def theAddress (get customerList (- x 1)))
        (def string (get customerList x))
        (def possiblePhone (clojure.string/split string #"\n"))
        (def phoneNum (get possiblePhone 0))
        (def phoneNum (clojure.string/trim phoneNum))
        (println "["counter theName theAddress phoneNum"]")
        (def counter (+ counter 1))
        (recur (+ x 3))))
    (println)) 
  (when (= choice "2")
    (println "2. Display Product Table")
    (def counter 1)
    (loop [x 2]
      (when (< x (count productList))
        (def product (get productList (- x 1)))
        (def priceString (get productList x))
        (def priceVec (clojure.string/split priceString #"\n"))
        (def price (get priceVec 0))
        (def price (clojure.string/trim price))
        (println "[" counter product price "]")
        (def counter (+ counter 1))
        (recur (+ x 2)))))
  (when (= choice "3")
    (println "3. Display Sales Table")
    (def counter 1)
    (def i (Integer/parseInt "1"))
    (loop [x 3]
      (when (< x (count salesList))
        (def customerIndex (get salesList (- x 2)))
        (def customerIndex (Integer/parseInt customerIndex))
        (def customerSale (get customerList (+ (* (- customerIndex 1) 3) 1)))
        (def productIndex (get salesList (- x 1)))
        (def productIndex (Integer/parseInt productIndex))
        (def productIndex (* productIndex 2))
        (def productIndex (- productIndex 1))
        (def productSale (get productList productIndex))
        (def amountString (get salesList x))
        (def amountVec (clojure.string/split amountString #"\n"))
        (def amount (get amountVec 0))
        (def amount (clojure.string/trim amount))
        (println "[" counter customerSale productSale amount "]")
        (def counter (+ counter 1))
        (recur (+ x 3)))))
  (when (= choice "4")
    (println "4. Total Sales for Customer")
    (println "Enter name of customer: ")
    (def desiredCustomer (read-line))
    (def desiredProductIndex 0)
    (def salesPrice 0)
    (loop [x 1]
      (when (< x (count salesList))
        (def desiredIndex (get salesList x))
        (def desiredIndex (Integer/parseInt desiredIndex))
        (def desiredIndex (+ (* (- desiredIndex 1) 3) 1))
        (def desiredCustomerString (get customerList desiredIndex))
        (if (= desiredCustomerString desiredCustomer)
          (do (def desiredProductIndex (get salesList (+ x 1)))
              (def desiredProductIndex (Integer/parseInt desiredProductIndex))
              (def desiredProductIndex (* desiredProductIndex 2))
              (def desiredProductIndex (- desiredProductIndex 1))
              (def desiredProductIndex (+ desiredProductIndex 1))
              (def salesString (get productList desiredProductIndex))
              (def salesPriceArr (clojure.string/split salesString #"\n"))
              (def salesPriceString (get salesPriceArr 0))
              (def salesPriceString (clojure.string/trim salesPriceString))
              (def salesPriceInstance (Double/parseDouble salesPriceString))
              (def quantityString (get salesList (+ x 2)))
              (def quantityArr (clojure.string/split quantityString #"\n"))
              (def quantity (get quantityArr 0))
              (def quantity (clojure.string/trim quantity))
              (def quantity (Integer/parseInt quantity))
              (def totalAmount (* quantity salesPriceInstance))
              (def salesPrice (+ salesPrice totalAmount)))) 
        (recur (+ x 3))))
    (println desiredCustomer ": $"salesPrice))
  (when (= choice "5")
    (println "5. Total Count for Product")
    (println "Enter the product name: ")
    (def desiredProduct (read-line))
    (def desiredAmountIndex 0)
    (def totalProductAmount 0)
    (loop [x 2]
      (when (< x (count salesList))
        (def salesProductRecordIndex (get salesList x))
        (def salesProductRecordIndex (Integer/parseInt salesProductRecordIndex))
        (def salesProductRecordIndex (* salesProductRecordIndex 2))
        (def salesProductRecordIndex (- salesProductRecordIndex 1))
        (def actualProductString (get productList salesProductRecordIndex))
        (if (= actualProductString desiredProduct)
          (do (def givenProductAmountString (get salesList (+ x 1)))
              (def productAmountArray (clojure.string/split givenProductAmountString #"\n"))
              (def integerAmount (get productAmountArray 0))
              (def integerAmount (clojure.string/trim integerAmount))
              (def integerAmount (Integer/parseInt integerAmount))
              (def totalProductAmount (+ totalProductAmount integerAmount))))
        (recur (+ x 3))))
    (println desiredProduct":" totalProductAmount)
    )
  (when (= choice "6")
    (println "Good bye for now.")
    (java.lang.System/exit 0)))